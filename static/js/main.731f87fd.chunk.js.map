{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA6BH,EAAMI,QAAQC,GAA3C,4BACxB,+BAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAKN,EAAMI,QAAQG,YCFdC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCNpBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACjB,uBACIZ,UAAY,SACZa,KAAO,SACPF,YAAgBA,EAChBG,SAAaF,MCuCVG,G,wDAvCb,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAlB1C,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IAJJ,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,OACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,oB,oBAS9B,WAAS,MAC4BC,KAAKV,MAAhCb,EADD,EACCA,SAAWU,EADZ,EACYA,YAEbc,EAAmBxB,EAASyB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAClD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACC,cAAC,EAAD,CACCW,YAAc,oBACdC,aAAiBmB,KAAKnB,eACxB,cAAC,EAAD,CAAUJ,SAAYwB,W,GAlCZI,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.731f87fd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css'\r\nexport const Card = (props) => {\r\n    return(\r\n    <div className = 'card-container'>\r\n        <img alt = 'monster' src = {`https://robohash.org/${ props.monster.id }?set=set2&size=200x200`} />\r\n        <h2 >{ props.monster.name } </h2>\r\n        <p>{ props.monster.email }</p>\r\n    </div>)\r\n}","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n            <Card key = {monster.id} monster = {monster}/>))}\r\n        </div>   // children is anything between CardList\r\n    )                                                         // of the App.js\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder , handleChange }) =>(\r\n        <input \r\n            className = 'search'\r\n            type = 'search'\r\n            placeholder = { placeholder }\r\n            onChange = { handleChange } \r\n         />\r\n)","import React , { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component.jsx'\n\nimport { SearchBox } from './components/search-box/search-box.component.jsx'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      monsters : [],   // initial state set to empty\n      searchField : ''\n    }\n    \n    //this.handleChange = this.handleChange.bind(this)   -> this is used without arrow fuction\n  }\n  componentDidMount() {    // it will be called when the rendering is done for the very first time\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n    .catch(error => console.log('SERVER DOWN'))\n    //.then(users => console.log(users))\n  }\n  // handleChange(e) {    here we will need to bind this explicitely\n  //   this.setState({ searchField: e.target.value})\n  // }\n  handleChange = event => {\n    this.setState({ searchField: event.target.value})\n  }\n  render() {        // render is just only required to tell what is to be rendered onto the broweser screen\n    const { monsters , searchField } = this.state\n    // this will return an array of filteredMonsters\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>MONSTERS ROLODEX</h1>\n         <SearchBox \n          placeholder = \"Search Monsters!!\"\n          handleChange = { this.handleChange }/>\n        <CardList monsters = {filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}